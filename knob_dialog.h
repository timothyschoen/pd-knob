// For information on usage and redistribution, and for a DISCLAIMER OF ALL
// WARRANTIES, see the file, "LICENSE.txt," in this distribution.
// Copyright (c) 1997-2009 Miller Puckette.

sys_gui("\n"
"package provide dialog_iemgui 0.1\n"
"\n"
"namespace eval ::dialog_iemgui:: {\n"
"    namespace export pdtk_iemgui_dialog\n"
"}\n"
"\n"
"set ::dialog_iemgui::dirname [file dirname [info script]]\n"
"\n"
"proc ::dialog_iemgui::call_gui_proc {mytoplevel p args} {\n"
"    set vid [string trimleft $mytoplevel .]\n"
"    set guitype $::dialog_iemgui::var_type($vid)\n"
"    set gui_proc \"::dialog_iemgui_${guitype}::${p}\"\n"
"    if {[info procs $gui_proc] ne {}} {\n"
"        eval $gui_proc $mytoplevel {*}$args\n"
"    }\n"
"}\n"
"\n"
"\n"
"# arrays to store per-dialog values\n"
"array set ::dialog_iemgui::var_type {} ;# |vsl| |bang|...\n"
"\n"
"array set ::dialog_iemgui::var_width {} ;# var_iemgui_wdt\n"
"array set ::dialog_iemgui::var_height {} ;# var_iemgui_hgt\n"
"array set ::dialog_iemgui::var_minwidth {} ;# var_iemgui_min_wdt\n"
"array set ::dialog_iemgui::var_minheight {} ;# var_iemgui_min_hgt\n"
"\n"
"array set ::dialog_iemgui::var_range_max {} ;# var_iemgui_max_rng\n"
"array set ::dialog_iemgui::var_range_min {} ;# var_iemgui_min_rng\n"
"array set ::dialog_iemgui::var_range_checkmode {} ;# var_iemgui_rng_sch\n"
"\n"
"array set ::dialog_iemgui::var_initial {} ;# var_iemgui_initial\n"
"array set ::dialog_iemgui::var_steady {} ;# var_iemgui_steady\n"
"array set ::dialog_iemgui::var_number {} ;# var_iemgui_num\n"
"\n"
"array set ::dialog_iemgui::var_snd {} ;# var_send\n"
"array set ::dialog_iemgui::var_rcv {} ;# var_receive\n"
"\n"
"array set ::dialog_iemgui::var_color_background {} ;# var_iemgui_bcol\n"
"array set ::dialog_iemgui::var_color_foreground {} ;# var_iemgui_fcol\n"
"array set ::dialog_iemgui::var_colortype {} ;# var_iemgui_l2_f1_b0\n"
"\n"
"\n"
"proc ::dialog_iemgui::tonumber val {\n"
"    set x 0\n"
"    catch {\n"
"        set x [expr $val]\n"
"    }\n"
"    return $x\n"
"}\n"
"\n"
"proc ::dialog_iemgui::clip {val min {max {}}} {\n"
"    set val [tonumber $val]\n"
"    if {$min ne {} && $val < $min} {return $min}\n"
"    if {$max ne {} && $val > $max} {return $max}\n"
"    return $val\n"
"}\n"
"\n"
"proc ::dialog_iemgui::clip_dim {mytoplevel} {\n"
"    set vid [string trimleft $mytoplevel .]\n"
"\n"
"    set ::dialog_iemgui::var_width($vid) [clip $::dialog_iemgui::var_width($vid) $::dialog_iemgui::var_minwidth($vid)]\n"
//"    set ::dialog_iemgui::var_height($vid) [clip $::dialog_iemgui::var_height($vid) $::dialog_iemgui::var_minheight($vid)]\n"
"}\n"
"\n"
"proc ::dialog_iemgui::clip_num {mytoplevel} {\n"
"    set vid [string trimleft $mytoplevel .]\n"
"\n"
"    set ::dialog_iemgui::var_number($vid) [clip $::dialog_iemgui::var_number($vid) 1 2000]\n"
"}\n"
"\n"
"\n"
"proc ::dialog_iemgui::preset_col {mytoplevel presetcol} {\n"
"    set vid [string trimleft $mytoplevel .]\n"
"\n"
"    switch -- $::dialog_iemgui::var_colortype($vid) {\n"
"        0 { set ::dialog_iemgui::var_color_background($vid) $presetcol }\n"
"        1 { set ::dialog_iemgui::var_color_foreground($vid) $presetcol }\n"
"    }\n"
"    call_gui_proc $mytoplevel preset_col $presetcol\n"
"}\n"
"\n"
"proc ::dialog_iemgui::choose_col_bkfrlb {mytoplevel} {\n"
"    # TODO rename this\n"
"    set vid [string trimleft $mytoplevel .]\n"
"\n"
"    switch -- $::dialog_iemgui::var_colortype($vid) {\n"
"        0 {\n"
"            set title [_ \"Background color\" ]\n"
"            set color $::dialog_iemgui::var_color_background($vid)\n"
"        }\n"
"        1 {\n"
"            set title [_ \"Foreground color\" ]\n"
"            set color $::dialog_iemgui::var_color_foreground($vid)\n"
"        }\n"
"    }\n"
"    set color [tk_chooseColor -title $title -initialcolor $color]\n"
"    call_gui_proc $mytoplevel choose_col\n"
"\n"
"    if { $color ne \"\" } {\n"
"        ::dialog_iemgui::preset_col $color\n"
"    }\n"
"}\n"
"\n"
"proc ::dialog_iemgui::popupmenu {path varname labels {command {}}} {\n"
"    upvar 1 $varname var\n"
"\n"
"    menubutton ${path} -menu ${path}.menu -indicatoron 1 -relief raised -text [lindex $labels $var]\n"
"    menu ${path}.menu -tearoff 0\n"
"    set idx 0\n"
"    foreach l $labels {\n"
"        $path.menu add radiobutton -label \"$l\" -variable $varname -value $idx\n"
"        $path.menu entryconfigure last -command \"\\{$path\\} configure -text \\{$l\\}; $command\"\n"
"        incr idx\n"
"    }\n"
"}\n"
"\n"
"# open popup over source button\n"
"\n"
"proc ::dialog_iemgui::apply {mytoplevel} {\n"
"    set vid [string trimleft $mytoplevel .]\n"
"\n"
"    ::dialog_iemgui::clip_dim $mytoplevel\n"
"    ::dialog_iemgui::clip_num $mytoplevel\n"
"\n"
"\n"
"    # TODO wrap the name-mangling ('empty', unspace_text, map) into a helper-proc\n"
"    set sendname empty\n"
"    set receivename empty\n"
"    set labelname empty\n"
"\n"
"    if {$::dialog_iemgui::var_snd($vid) ne \"\"} {set sendname $::dialog_iemgui::var_snd($vid)}\n"
"    if {$::dialog_iemgui::var_rcv($vid) ne \"\"} {set receivename $::dialog_iemgui::var_rcv($vid)}\n"
"\n"
"\n"
"    set additonal_output [call_gui_proc $mytoplevel apply]\n"
"    pdsend [concat $mytoplevel dialog \\\n"
"                $::dialog_iemgui::var_width($vid) \\\n"
"                $::dialog_iemgui::var_height($vid) \\\n"
"                $::dialog_iemgui::var_range_min($vid) \\\n"
"                $::dialog_iemgui::var_range_max($vid) \\\n"
"                $::dialog_iemgui::var_initial($vid) \\\n"
"                0 \\\n" // Always linear
"                $::dialog_iemgui::var_number($vid) \\\n"
"                [string map {\"$\" {\\$}} [unspace_text $sendname]] \\\n"
"                [string map {\"$\" {\\$}} [unspace_text $receivename]] \\\n"
"                empty \\\n" // no label info!
"                0 \\\n"
"                0 \\\n"
"                0 \\\n"
"                0 \\\n"
"                [string tolower $::dialog_iemgui::var_color_background($vid)] \\\n"
"                [string tolower $::dialog_iemgui::var_color_foreground($vid)] \\\n"
"                $::dialog_iemgui::var_steady($vid) \\\n"
"                $::dialog_iemgui_knob::var_ticks($vid) \\\n"
"                0 \\\n"
"                $::dialog_iemgui_knob::var_arc_width($vid) \\\n"
"                $::dialog_iemgui_knob::var_start_angle($vid) \\\n"
"                $::dialog_iemgui_knob::var_end_angle($vid) \\\n"
"                 \\\n"
"            ]\n"

"}\n"
"\n"
"\n"
"proc ::dialog_iemgui::cancel {mytoplevel} {\n"
"    pdsend \"$mytoplevel cancel\"\n"
"}\n"
"\n"
"proc ::dialog_iemgui::ok {mytoplevel} {\n"
"    ::dialog_iemgui::apply $mytoplevel\n"
"    ::dialog_iemgui::cancel $mytoplevel\n"
"}\n"
"\n"
"proc ::dialog_iemgui::pdtk_iemgui_dialog {mytoplevel mainheader dim_header_UNUSED \\\n"
"                                       wdt min_wdt label_width \\\n"
"                                       hgt min_hgt label_height \\\n"
"                                       label_range min_rng label_range_min max_rng \\\n"
"                                       label_range_max rng_sched \\\n"
    "                                   lin0_log1_UNUSED lilo0_label_UNUSED lilo1_label_UNUSED \\\n"
"                                       initial steady label_number num \\\n"
"                                       snd rcv \\\n"
"                                       gui_name \\\n"
"                                       gn_dx gn_dy gn_f gn_fs \\\n"
"                                       bcol fcol lcol \\\n"
"                                       args} {\n"
"\n"
"    set vid [string trimleft $mytoplevel .]\n"
"    set snd [::pdtk_text::unescape $snd]\n"
"    set rcv [::pdtk_text::unescape $rcv]\n"
"    set gui_name [::pdtk_text::unescape $gui_name]\n"
"\n"
"    # initialize the array\n"
"    set ::dialog_iemgui::var_type($vid) $mainheader\n"
"\n"
"    set ::dialog_iemgui::var_width($vid) $wdt\n"
"    set ::dialog_iemgui::var_height($vid) $hgt\n"
"    set ::dialog_iemgui::var_minwidth($vid) $min_wdt\n"
"    set ::dialog_iemgui::var_minheight($vid) $min_hgt\n"
"\n"
"    set ::dialog_iemgui::var_range_max($vid) $max_rng\n"
"    set ::dialog_iemgui::var_range_min($vid) $min_rng\n"
"    set ::dialog_iemgui::var_range_checkmode($vid) $rng_sched\n"
"\n"
"    set ::dialog_iemgui::var_initial($vid) $initial\n"
"    set ::dialog_iemgui::var_steady($vid) $steady\n"
"    set ::dialog_iemgui::var_number($vid) $num\n"
"\n"
"    set ::dialog_iemgui::var_snd($vid) $snd\n"
"    set ::dialog_iemgui::var_rcv($vid) $rcv\n"
"\n"
"    set ::dialog_iemgui::var_color_background($vid) $bcol\n"
"    set ::dialog_iemgui::var_color_foreground($vid) $fcol\n"
"    set ::dialog_iemgui::var_colortype($vid) 0\n"
"\n"
"    # Override incoming values for known iem guis.\n"
"    set iemgui_type [_ $mainheader]\n"
"\n"
"    toplevel $mytoplevel -class DialogWindow\n"
"    wm title $mytoplevel \"knob properties\"\n"
"    wm group $mytoplevel .\n"
"    wm resizable $mytoplevel 0 0\n"
"    wm transient $mytoplevel $::focused_window\n"
"    $mytoplevel configure -menu $::dialog_menubar\n"
"    $mytoplevel configure -padx 0 -pady 0\n"
"    ::pd_bindings::dialog_bindings $mytoplevel \"iemgui\"\n"
"\n"
"    # dimensions\n"
"    frame $mytoplevel.dim -height 7\n"
"    pack $mytoplevel.dim -side top\n"
"    label $mytoplevel.dim.w_lab -text [_ $label_width]\n"
"    entry $mytoplevel.dim.w_ent -textvariable ::dialog_iemgui::var_width($vid) -width 4\n"
"    label $mytoplevel.dim.dummy1 -text \"\" -width 1\n"
"    pack $mytoplevel.dim.w_lab $mytoplevel.dim.w_ent -side left\n"
"    # range\n"
"    labelframe $mytoplevel.rng\n"
"    pack $mytoplevel.rng -side top -fill x\n"
"    frame $mytoplevel.rng.min\n"
"    label $mytoplevel.rng.min.lab -text $label_range_min\n"
"    entry $mytoplevel.rng.min.ent -textvariable ::dialog_iemgui::var_range_min($vid) -width 7\n"
"    label $mytoplevel.rng.dummy1 -text \"\" -width 1\n"
"    label $mytoplevel.rng.max_lab -text [_ $label_range_max]\n"
"    entry $mytoplevel.rng.max_ent -textvariable ::dialog_iemgui::var_range_max($vid) -width 7\n"

// exp
"    label $mytoplevel.rng.e_lab -text [_ $label_height]\n"
"    entry $mytoplevel.rng.e_ent -textvariable ::dialog_iemgui::var_height($vid) -width 4\n"

"    if { $label_range ne \"\" } {\n"
"        $mytoplevel.rng config -borderwidth 1 -pady 4 -text [_ $label_range]\n"
"        if { $label_range_min ne \"\" } {\n"
"            pack $mytoplevel.rng.min\n"
"            pack $mytoplevel.rng.min.lab $mytoplevel.rng.min.ent -side left }\n"
"        if { $label_range_max ne \"\" } {\n"
"            $mytoplevel.rng config -padx 26\n"
"            pack configure $mytoplevel.rng.min -side left\n"
"            pack $mytoplevel.rng.dummy1 $mytoplevel.rng.max_lab $mytoplevel.rng.max_ent -side left}\n"

// exp
"       if { $label_height ne \"\" } {\n"
"           pack $mytoplevel.dim.dummy1 $mytoplevel.rng.e_lab $mytoplevel.rng.e_ent -side left }\n"

"    }\n"
"\n"
"    # parameters\n"
"    labelframe $mytoplevel.para -borderwidth 1 -padx 5 -pady 5 -text [_ \"Parameters\"]\n"
"    pack $mytoplevel.para -side top -fill x -pady 5\n"
"    frame $mytoplevel.para.std\n"
"    pack $mytoplevel.para.std -side top -fill x\n"
"\n"
"    frame $mytoplevel.para.std.num\n"
"    label $mytoplevel.para.std.num.lab -text [_ $label_number]\n"
"    entry $mytoplevel.para.std.num.ent -textvariable ::dialog_iemgui::var_number($vid) -width 4\n"
"    pack $mytoplevel.para.std.num.ent $mytoplevel.para.std.num.lab -side right -anchor e\n"
"\n"
"    set applycmd \"\"\n"
"    if {$::windowingsystem eq \"aqua\"} {\n"
"        set applycmd \"::dialog_iemgui::apply $mytoplevel\"\n"
"    }\n"
"\n"
"    # messages\n"
"    labelframe $mytoplevel.s_r -borderwidth 1 -padx 5 -pady 5 -text [_ \"Send/Receive\"]\n"
"    pack $mytoplevel.s_r -side top -fill x\n"
"    frame $mytoplevel.s_r.send\n"
"    pack $mytoplevel.s_r.send -side top -anchor e -padx 5\n"
"    label $mytoplevel.s_r.send.lab -text [_ \"Send symbol:\"]\n"
"    entry $mytoplevel.s_r.send.ent -textvariable ::dialog_iemgui::var_snd($vid) -width 21\n"
"    if { $snd ne \"nosndno\" } {\n"
"        pack $mytoplevel.s_r.send.lab $mytoplevel.s_r.send.ent -side left \\\n"
"            -fill x -expand 1\n"
"    }\n"
"\n"
"    frame $mytoplevel.s_r.receive\n"
"    pack $mytoplevel.s_r.receive -side top -anchor e -padx 5\n"
"    label $mytoplevel.s_r.receive.lab -text [_ \"Receive symbol:\"]\n"
"    entry $mytoplevel.s_r.receive.ent -textvariable ::dialog_iemgui::var_rcv($vid) -width 21\n"
"    if { $rcv ne \"norcvno\" } {\n"
"        pack $mytoplevel.s_r.receive.lab $mytoplevel.s_r.receive.ent -side left \\\n"
"            -fill x -expand 1\n"
"    }\n"
"\n"
"    # get the current font name from the int given from C-space (gn_f)\n"
"    set current_font $::font_family\n"
"\n"
"    # colors\n"
"    labelframe $mytoplevel.colors -borderwidth 1 -text [_ \"Colors\"] -padx 5 -pady 5\n"
"    pack $mytoplevel.colors -fill x\n"
"\n"
"    frame $mytoplevel.colors.select\n"
"    pack $mytoplevel.colors.select -side top\n"
"    radiobutton $mytoplevel.colors.select.radio0 \\\n"
"        -value 0 -variable ::dialog_iemgui::var_colortype($vid) \\\n"
"        -text [_ \"Background\"] -justify left\n"
"    radiobutton $mytoplevel.colors.select.radio1 \\\n"
"        -value 1 -variable ::dialog_iemgui::var_colortype($vid) \\\n"
"        -text [_ \"Front\"] -justify left\n"
"    if { $::dialog_iemgui::var_color_foreground($vid) ne \"none\" } {\n"
"        pack $mytoplevel.colors.select.radio0 $mytoplevel.colors.select.radio1 -side left \\\n"
"    } else {\n"
"        pack $mytoplevel.colors.select.radio0  pack $mytoplevel.colors.select.radio1 -side left\n"
"    }\n"
"\n"
"    frame $mytoplevel.colors.sections\n"
"    pack $mytoplevel.colors.sections -side top\n"
"    button $mytoplevel.colors.sections.but -text [_ \"Compose color\"] \\\n"
"        -command \"::dialog_iemgui::choose_col_bkfrlb $mytoplevel\"\n"
"    pack $mytoplevel.colors.sections.but -side left -anchor w -pady 5 \\\n"
"        -expand yes -fill x\n"
"    frame $mytoplevel.colors.sections.exp\n"
"    # color scheme by Mary Ann Benedetto http://piR2.org\n"
"    foreach r {r1 r2 r3} hexcols {\n"
"       { \"#FFFFFF\" \"#DFDFDF\" \"#BBBBBB\" \"#FFC7C6\" \"#FFE3C6\" \"#FEFFC6\" \"#C6FFC7\" \"#C6FEFF\" \"#C7C6FF\" \"#E3C6FF\" }\n"
"       { \"#9F9F9F\" \"#7C7C7C\" \"#606060\" \"#FF0400\" \"#FF8300\" \"#FAFF00\" \"#00FF04\" \"#00FAFF\" \"#0400FF\" \"#9C00FF\" }\n"
"       { \"#404040\" \"#202020\" \"#000000\" \"#551312\" \"#553512\" \"#535512\" \"#0F4710\" \"#0E4345\" \"#131255\" \"#2F004D\" } } \\\n"
"    {\n"
"       frame $mytoplevel.colors.$r\n"
"       pack $mytoplevel.colors.$r -side top\n"
"       foreach i { 0 1 2 3 4 5 6 7 8 9} hexcol $hexcols \\\n"
"           {\n"
"               label $mytoplevel.colors.$r.c$i -background $hexcol -activebackground $hexcol -relief ridge -padx 7 -pady 0 -width 1\n"
"               bind $mytoplevel.colors.$r.c$i <Button> \"::dialog_iemgui::preset_col $mytoplevel $hexcol\"\n"
"           }\n"
"       pack $mytoplevel.colors.$r.c0 $mytoplevel.colors.$r.c1 $mytoplevel.colors.$r.c2 $mytoplevel.colors.$r.c3 \\\n"
"           $mytoplevel.colors.$r.c4 $mytoplevel.colors.$r.c5 $mytoplevel.colors.$r.c6 $mytoplevel.colors.$r.c7 \\\n"
"           $mytoplevel.colors.$r.c8 $mytoplevel.colors.$r.c9 -side left\n"
"    }\n"
"\n"
"    # buttons\n"
"    frame $mytoplevel.cao -pady 10\n"
"    pack $mytoplevel.cao -side top\n"
"    button $mytoplevel.cao.cancel -text [_ \"Cancel\"] \\\n"
"        -command \"::dialog_iemgui::cancel $mytoplevel\"\n"
"    pack $mytoplevel.cao.cancel -side left -expand 1 -fill x -padx 15 -ipadx 10\n"
"    if {$::windowingsystem ne \"aqua\"} {\n"
"        button $mytoplevel.cao.apply -text [_ \"Apply\"] \\\n"
"            -command \"::dialog_iemgui::apply $mytoplevel\"\n"
"        pack $mytoplevel.cao.apply -side left -expand 1 -fill x -padx 15 -ipadx 10\n"
"    }\n"
"    button $mytoplevel.cao.ok -text [_ \"OK\"] \\\n"
"        -command \"::dialog_iemgui::ok $mytoplevel\" -default active\n"
"    pack $mytoplevel.cao.ok -side left -expand 1 -fill x -padx 15 -ipadx 10\n"
"\n"
"    $mytoplevel.dim.w_ent select from 0\n"
"    $mytoplevel.dim.w_ent select adjust end\n"
"    focus $mytoplevel.dim.w_ent\n"
"\n"
"    # live widget updates on OSX in lieu of Apply button\n"
"    if {$::windowingsystem eq \"aqua\"} {\n"
"\n"
"        # call apply on Return in entry boxes that are in focus & rebind Return to ok button\n"
"        bind $mytoplevel.dim.w_ent <KeyPress-Return> \"::dialog_iemgui::apply_and_rebind_return $mytoplevel\"\n"
"        bind $mytoplevel.rng.e_ent <KeyPress-Return> \"::dialog_iemgui::apply_and_rebind_return $mytoplevel\"\n"
"        bind $mytoplevel.rng.min.ent <KeyPress-Return> \"::dialog_iemgui::apply_and_rebind_return $mytoplevel\"\n"
"        bind $mytoplevel.rng.max_ent <KeyPress-Return> \"::dialog_iemgui::apply_and_rebind_return $mytoplevel\"\n"
"        bind $mytoplevel.para.std.num.ent <KeyPress-Return> \"::dialog_iemgui::apply_and_rebind_return $mytoplevel\"\n"
"        bind $mytoplevel.s_r.send.ent <KeyPress-Return> \"::dialog_iemgui::apply_and_rebind_return $mytoplevel\"\n"
"        bind $mytoplevel.s_r.receive.ent <KeyPress-Return> \"::dialog_iemgui::apply_and_rebind_return $mytoplevel\"\n"
"\n"
"        # unbind Return from ok button when an entry takes focus\n"
"        $mytoplevel.dim.w_ent config -validate focusin -vcmd \"::dialog_iemgui::unbind_return $mytoplevel\"\n"
"        $mytoplevel.rng.e_ent config -validate focusin -vcmd \"::dialog_iemgui::unbind_return $mytoplevel\"\n"
"        $mytoplevel.rng.min.ent config -validate focusin -vcmd \"::dialog_iemgui::unbind_return $mytoplevel\"\n"
"        $mytoplevel.rng.max_ent config -validate focusin -vcmd \"::dialog_iemgui::unbind_return $mytoplevel\"\n"
"        $mytoplevel.para.std.num.ent config -validate focusin -vcmd \"::dialog_iemgui::unbind_return $mytoplevel\"\n"
"        $mytoplevel.s_r.send.ent config -validate focusin -vcmd \"::dialog_iemgui::unbind_return $mytoplevel\"\n"
"        $mytoplevel.s_r.receive.ent config -validate focusin -vcmd \"::dialog_iemgui::unbind_return $mytoplevel\"\n"
"\n"
"        # remove cancel button from focus list since it's not activated on Return\n"
"        $mytoplevel.cao.cancel config -takefocus 0\n"
"\n"
"        # show active focus on the ok button as it *is* activated on Return\n"
"        $mytoplevel.cao.ok config -default normal\n"
"        bind $mytoplevel.cao.ok <FocusIn> \"$mytoplevel.cao.ok config -default active\"\n"
"        bind $mytoplevel.cao.ok <FocusOut> \"$mytoplevel.cao.ok config -default normal\"\n"
"\n"
"        # since we show the active focus, disable the highlight outline\n"
"        $mytoplevel.cao.ok config -highlightthickness 0\n"
"        $mytoplevel.cao.cancel config -highlightthickness 0\n"
"    }\n"
"\n"
"    if {$iemgui_type eq [_ $mainheader]} {\n"
"        # the widget properties is defined in an external file\n"
"        catch {\n"
"            source [file join $::dialog_iemgui::dirname \"dialog_iemgui_$mainheader.tcl\"]\n"
"        }\n"
"        call_gui_proc $mytoplevel create_properties [list $current_font] $args\n"
"    }\n"
"\n"
"    position_over_window $mytoplevel $::focused_window\n"
"}\n"
"\n"
"# for live widget updates on OSX\n"
"proc ::dialog_iemgui::apply_and_rebind_return {mytoplevel} {\n"
"    ::dialog_iemgui::apply $mytoplevel\n"
"    bind $mytoplevel <KeyPress-Return> \"::dialog_iemgui::ok $mytoplevel\"\n"
"    focus $mytoplevel.cao.ok\n"
"    return 0\n"
"}\n"
"\n"
"# for live widget updates on OSX\n"
"proc ::dialog_iemgui::unbind_return {mytoplevel} {\n"
"    bind $mytoplevel <KeyPress-Return> break\n"
"    return 1\n"
"}\n");

sys_gui("\nnamespace eval ::dialog_iemgui_knob:: {}\n"
"\n"
"array set ::dialog_iemgui_knob::var_ticks {} ;\n"
"array set ::dialog_iemgui_knob::var_arc_width {} ;\n"
"array set ::dialog_iemgui_knob::var_start_angle {} ;\n"
"array set ::dialog_iemgui_knob::var_end_angle {} ;\n"
"\n"
"proc ::dialog_iemgui_knob::popupmenu_strval {path varname values labels {command {}}} {\n"
"    upvar 1 $varname var\n"
"\n"
"    menubutton ${path} -menu ${path}.menu -indicatoron 1 -relief raised \\\n"
"        -text [lindex $labels [lsearch -exact $values $var]]\n"
"    menu ${path}.menu -tearoff 0\n"
"    set idx 0\n"
"    foreach l $labels {\n"
"        $path.menu add radiobutton -label \"$l\" -variable $varname -value [lindex $values $idx]\n"
"        $path.menu entryconfigure last -command \"\\{$path\\} configure -text \\{$l\\}; $command\"\n"
"        incr idx\n"
"    }\n"
"}\n"
"\n"
"proc ::dialog_iemgui_knob::create_properties {mytoplevel current_font ticks arc_width \\\n"
"        start_angle end_angle} {\n"
"    set vid [string trimleft $mytoplevel .]\n"
"\n"
"    set ::dialog_iemgui_knob::var_ticks($vid) $ticks\n"
"    set ::dialog_iemgui_knob::var_arc_width($vid) $arc_width\n"
"    set ::dialog_iemgui_knob::var_start_angle($vid) $start_angle\n"
"    set ::dialog_iemgui_knob::var_end_angle($vid) $end_angle\n"
"\n"
"    $mytoplevel.rng.e_lab configure -text [_ \"Exp:\"]\n"
"    set applycmd \"\"\n"
"    if {$::windowingsystem eq \"aqua\"} {\n"
"        set applycmd \"::dialog_iemgui::apply $mytoplevel\"\n"
"    }\n"
"    label $mytoplevel.para.std.initial_lab -text [_ \"Initial Value\"]\n"
"    entry $mytoplevel.para.std.initial_ent -textvariable ::dialog_iemgui::var_initial($vid) -width 6\n"
"    pack $mytoplevel.para.std.initial_lab -side left -expand 0 -ipadx 4\n"
"    pack $mytoplevel.para.std.initial_ent -side left -expand 0 -ipadx 10\n"
"    destroy $mytoplevel.para.std.stdy_jmp\n"
"    label $mytoplevel.para.std.move_label -text [_ \"Move Mode:\"]\n"
"    ::dialog_iemgui_knob::popupmenu_strval $mytoplevel.para.std.move_mode \\\n"
"        ::dialog_iemgui::var_steady($vid) \\\n"
"        [list 0 1] [list [_ \"Normal\"] [_ \"Circular\"] ] \\\n"
"        $applycmd\n"
"    pack $mytoplevel.para.std.move_label -side left -expand 0 -ipadx 4\n"
"    pack $mytoplevel.para.std.move_mode -side left -expand 0 -ipadx 10\n"
"\n"
"\n"
"    $mytoplevel.rng.min.lab configure -text [_ \"Min:\"]\n"
"    $mytoplevel.rng.max_lab configure -text [_ \"Max:\"]\n"
"    # style\n"
"    frame $mytoplevel.para.knobstyle -padx 20 -pady 1\n"
"\n"
"    frame $mytoplevel.para.knobstyle.ticks\n"
"    label $mytoplevel.para.knobstyle.ticks.lab -text [_ \"Ticks: \"]\n"
"    entry $mytoplevel.para.knobstyle.ticks.ent -textvariable ::dialog_iemgui_knob::var_ticks($vid) -width 5\n"
"    pack $mytoplevel.para.knobstyle.ticks.ent $mytoplevel.para.knobstyle.ticks.lab -side right -anchor e\n"
"\n"
"    frame $mytoplevel.para.knobstyle.arc\n"
"    label $mytoplevel.para.knobstyle.arc.lab -text [_ \"Arc: \"]\n"
"    checkbutton $mytoplevel.para.knobstyle.arc.ent -variable ::dialog_iemgui_knob::var_arc_width($vid) -width 5\n"
"    pack $mytoplevel.para.knobstyle.arc.ent $mytoplevel.para.knobstyle.arc.lab -side right -anchor e\n"
"\n"
"    frame $mytoplevel.para.knobstyle.start\n"
"    label $mytoplevel.para.knobstyle.start.lab -text [_ \"Angular range: \"]\n"
"    entry $mytoplevel.para.knobstyle.start.ent -textvariable ::dialog_iemgui_knob::var_start_angle($vid) -width 5\n"
"    pack $mytoplevel.para.knobstyle.start.ent $mytoplevel.para.knobstyle.start.lab -side right -anchor e\n"
"\n"
"    frame $mytoplevel.para.knobstyle.end\n"
"    label $mytoplevel.para.knobstyle.end.lab -text [_ \"Offset: \"]\n"
"    entry $mytoplevel.para.knobstyle.end.ent -textvariable ::dialog_iemgui_knob::var_end_angle($vid) -width 5\n"
"    pack $mytoplevel.para.knobstyle.end.ent $mytoplevel.para.knobstyle.end.lab -side right -anchor w\n"
"\n"
"    grid $mytoplevel.para.knobstyle.ticks -row 0 -column 0 -sticky e\n"
"    grid $mytoplevel.para.knobstyle.arc -row 1 -column 0 -sticky e\n"
"    grid $mytoplevel.para.knobstyle.start -row 0 -column 1 -sticky e -padx {20 0}\n"
"    grid $mytoplevel.para.knobstyle.end -row 1 -column 1 -sticky e -padx {20 0}\n"
"\n"
"    pack $mytoplevel.para.knobstyle -side top -fill x\n"
"\n"
"    label $mytoplevel.colors.sections.exp.arc_bk -text [_ \"Arc\"] \\\n"
"        -background $::dialog_iemgui::var_color_background($vid) \\\n"
"        -activebackground $::dialog_iemgui::var_color_background($vid) \\\n"
"        -font [list $current_font 14 $::font_weight] -padx 2 -pady 2 -relief ridge\n"
"    pack $mytoplevel.colors.sections.exp.arc_bk \\\n"
"        -side right -anchor e -expand yes -fill both -pady 7 \\\n"
"\n"
"    # live widget updates on OSX in lieu of Apply button\n"
"    if {$::windowingsystem eq \"aqua\"} {\n"
"\n"
"        # call apply on Return in entry boxes that are in focus & rebind Return to ok button\n"
"        bind $mytoplevel.para.knobstyle.ticks.ent <KeyPress-Return> \"::dialog_iemgui::apply_and_rebind_return $mytoplevel\"\n"
"        bind $mytoplevel.para.knobstyle.arc.ent <KeyPress-Return> \"::dialog_iemgui::apply_and_rebind_return $mytoplevel\"\n"
"        bind $mytoplevel.para.knobstyle.start.ent <KeyPress-Return> \"::dialog_iemgui::apply_and_rebind_return $mytoplevel\"\n"
"        bind $mytoplevel.para.knobstyle.end.ent <KeyPress-Return> \"::dialog_iemgui::apply_and_rebind_return $mytoplevel\"\n"
"\n"
"        # unbind Return from ok button when an entry takes focus\n"
"        $mytoplevel.para.knobstyle.ticks.ent config -validate focusin -vcmd \"::dialog_iemgui::unbind_return $mytoplevel\"\n"
"        $mytoplevel.para.knobstyle.start.ent config -validate focusin -vcmd \"::dialog_iemgui::unbind_return $mytoplevel\"\n"
"        $mytoplevel.para.knobstyle.end.ent config -validate focusin -vcmd \"::dialog_iemgui::unbind_return $mytoplevel\"\n"
"    }\n"
"}\n"
"\n"

"proc ::dialog_iemgui_knob::apply {mytoplevel} {\n"
"    set vid [string trimleft $mytoplevel .]\n"
"\n"
"    set ::dialog_iemgui_knob::var_ticks($vid) [::dialog_iemgui::clip $::dialog_iemgui_knob::var_ticks($vid) 0 360]\n"
"\n"
"    return [list $::dialog_iemgui_knob::var_ticks($vid) \\\n"
"        $::dialog_iemgui_knob::var_start_angle($vid) $::dialog_iemgui_knob::var_end_angle($vid) \\\n"
"    ]\n"
"}\n");
